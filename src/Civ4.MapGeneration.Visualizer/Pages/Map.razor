@page "/"

@using Civ4.MapGeneration.Layers.Landmasses;

@if (Boundary != null && LandTiles != null)
{
    <div class="grid-container" style="
            display: grid;
            --grid-cols: @Boundary.Width;
            --grid-rows: @Boundary.Height;
            grid-template-rows: repeat(var(--grid-rows), 0fr);
            grid-template-columns: repeat(var(--grid-cols), 0fr)">
            @for (int j = Boundary.Height - 1; j >= 0; j--)
            {
                for (int i = 0; i < Boundary.Width; i++)
                {
                    var isLand = LandTiles.Any(t => t.Location.X == i && t.Location.Y == j);
                    var isIce = !isLand ? IceTiles.Any(t => t.Location.X == i && t.Location.Y == j) : false;

                    var oceanTileColour = "#1c52d9";
                    var tileColour = isLand ? "#2da84e" : isIce ? "#c5d4eb" : oceanTileColour;

                    <div style="background-color:@tileColour; height: 20px; width: 20px; font-size: 6px;">
                        (@i,@j)
                    </div>
                }
            }
    </div>
}

@code {

    public List<Tile> LandTiles { get; set; }

    public List<Tile> IceTiles { get; set; }

    public Boundary Boundary { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Generating world with 2 continents");

            var dimensions = new Dimensions(60, 35);
            Boundary = Boundary.FromDimensions(dimensions, 0, 0);

            var world = World.Continents(dimensions, 2);

            LandTiles = world.LandTiles.ToList();
            IceTiles = world.IceTiles.ToList();

            StateHasChanged();
        }

        return Task.CompletedTask;
    }
}
